// ------------------------------------------------
// Headers to include
// ------------------------------------------------

#include <stdio.h>
#include <string.h>
#include <fcntl.h>
#include <dirent.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <unistd.h>
#include <libgen.h> // dirname
#include <limits.h>       //For PATH_MAX

#include <stdlib.h> // standard defs
#include <errno.h>

#include <signal.h> // catching ctrl-c signal to quit
#include <pthread.h> // threading
#include <time.h> // system time clocks

#include "config.h"
#include "advert.h"

#include <wiringPi.h> // Gordons Wiring Pi, millis()
#include <libconfig.h> // Config files /home/pi/shared/config/config.txt
// Include any extended elements


#define SHOW_DEBUG 0
// ------------------
// Helpers
// ------------------
#define CLEAR(x, y) memset(x,'\0',y)

#ifndef HAVE_STRLCAT
/*
 * '_cups_strlcat()' - Safely concatenate two strings.
 */

size_t                  /* O - Length of string */
strlcat(char *dst,        /* O - Destination string */
        const char *src,      /* I - Source string */
        size_t size)      /* I - Size of destination string buffer */
{
  size_t    srclen;         /* Length of source string */
  size_t    dstlen;         /* Length of destination string */


 /*
  * Figure out how much room is left...
  */

  dstlen = strlen(dst);
  size -= dstlen + 1;

  if (!size)
    return (dstlen);        /* No room, return immediately... */

 /*
  * Figure out how much room is needed...
  */

  srclen = strlen(src);

 /*
  * Copy the appropriate amount...
  */

  if (srclen > size)
    srclen = size;

  memcpy(dst + dstlen, src, srclen);
  dst[dstlen + srclen] = '\0';

  return (dstlen + srclen);
}
#endif /* !HAVE_STRLCAT */

#ifndef HAVE_STRLCPY
/*
 * '_cups_strlcpy()' - Safely copy two strings.
 */

size_t                  /* O - Length of string */
strlcpy(char *dst,        /* O - Destination string */
        const char *src,      /* I - Source string */
        size_t      size)     /* I - Size of destination string buffer */
{
  size_t    srclen;         /* Length of source string */


 /*
  * Figure out how much room is needed...
  */

  size --;

  srclen = strlen(src);

 /*
  * Copy the appropriate amount...
  */

  if (srclen > size)
    srclen = size;

  memcpy(dst, src, srclen);
  dst[srclen] = '\0';

  return (srclen);
}
#endif /* !HAVE_STRLCPY */


int isDirectory(const char *path) {
   struct stat statbuf;
   if (stat(path, &statbuf) != 0)
       return 0;
   return S_ISDIR(statbuf.st_mode);
}

// String helper mainly for CURL
struct string {
  char *ptr;
  size_t len;
};
void init_string(struct string *s) {
  s->len = 0;
  s->ptr = malloc(s->len+1);
  if (s->ptr == NULL) {
    fprintf(stderr, "malloc() failed\n");
    return;
  }
  s->ptr[0] = '\0';
}
size_t writefunc(void *ptr, size_t size, size_t nmemb, struct string *s)
{
  size_t new_len = s->len + size*nmemb;
  s->ptr = realloc(s->ptr, new_len+1);
  if (s->ptr == NULL) {
    fprintf(stderr, "realloc() failed\n");
    return (size_t)0;
  }
  memcpy(s->ptr+s->len, ptr, size*nmemb);
  s->ptr[new_len] = '\0';
  s->len = new_len;

  return size*nmemb;
}

// SIGINT handler
void signal_sigint(int sig){ // can be called asynchronously
  printf("\n\nHold on there fella, we gotta shut some shit down first!\n");
  m_bSigInt = sig;
  m_bQuit = 1;
}


//---------------------
// System Commands
//---------------------
void run_system_cmd(char *fullpath) {
  if (fullpath == NULL) { return; }

  system(fullpath);
}

int run_system_cmd_with_return(char *fullpath, char *ret, int retsize) {
  if (fullpath == NULL) {
    // puts("No Path");
    return -1;
  } else {
    FILE *fp;

    /* Open the command for reading. */
    fp = popen(fullpath, "r");
    if (fp == NULL) {
      // puts("Failed to run command");
      return -1;
    }

    /* Read the output a line at a time - output it. */
    char fRet[retsize];
    fgets(fRet, retsize-1, fp);
    strlcpy(ret, fRet, strlen(fRet));
    /* close */
    return WEXITSTATUS(pclose(fp));
  }
}


// --------------
// System Calls
// --------------

void volume_increase() {
  char *fullpath = malloc(strlen("amixer -c 0 set PCM 2db+") + 1);
  sprintf(fullpath, "%s", "amixer -c 0 set PCM 2db+");
  run_system_cmd(fullpath);
  free(fullpath);
}

void volume_decrease() {
  char *fullpath = malloc(strlen("amixer -c 0 set PCM 2db-") + 1);
  sprintf(fullpath, "%s", "amixer -c 0 set PCM 2db-");
  run_system_cmd(fullpath);
  free(fullpath);
}

void volume_mute() {
  char *fullpath = malloc(strlen("amixer sset PCM toggle") + 1);
  sprintf(fullpath, "%s", "amixer sset PCM toggle");
  run_system_cmd(fullpath);
  free(fullpath);
}

void fbi_post_image(char *img) {
  char* fbi_tmp = "sudo /usr/bin/fbi -T 1 --noverbose -d /dev/fb1 -a /home/pi/shared/%s > /dev/null 2>&1; sudo /usr/bin/fbi -T 1 --noverbose -d /dev/fb0 -a /home/pi/shared/%s > /dev/null 2>&1";
  char *fbi_load = malloc(strlen(fbi_tmp) + (strlen(img) * 2) - 3);
  sprintf(fbi_load, fbi_tmp, img, img);
  // debug_print("%s\n", fbi_load);
  run_system_cmd(fbi_load);
  free(fbi_load);
}

void fbi_close_image(char *img) {
  char* fbi_tmp = "sudo /usr/bin/fbi -T 1 -t 10 --noverbose -d /dev/fb1 -a %s > /dev/null 2>&1; sudo /usr/bin/fbi -T 1 --noverbose -d /dev/fb0 -a -t 10 %s > /dev/null 2>&1";
  char *fbi_load = malloc(strlen(fbi_tmp) + (strlen(img) * 2) - 3);
  sprintf(fbi_load, fbi_tmp, img, img);
  // debug_print("%s\n", fbi_load);
  run_system_cmd(fbi_load);
  free(fbi_load);
}






// --------------
// Public proxy calls for next / prev images
// --------------
void post_image() {
  run_system_cmd("sudo su -c 'kill $(pgrep fbi)' > /dev/null 2>&1; clear");
  if (files_i >= file_count) { files_i = 0; }
  if (files_i < 0) { files_i = file_count - 1; }
  fbi_post_image(files[files_i]);
  ss_delay = millis() + (SLIDESHOW_DELAY * 1000);
}

void prev_image() {
  files_i--;
  if (files_i < 0) { files_i = file_count - 1; }
  post_image();
}

void next_image() {
  files_i++;
  if (files_i >= file_count) { files_i = 0; }
  post_image();
}





// Create list of files from folder, loop twice first for count and second for data
size_t file_list(const char *path, char ***ls) {
    size_t count = 0;
    DIR *dp = NULL;
    struct dirent *ep = NULL;

    dp = opendir(path);
    if(NULL == dp) {
        fprintf(stderr, "no such directory: '%s'", path);
        return 0;
    }

    *ls = NULL;
    ep = readdir(dp);
    while(NULL != ep){
      struct stat s;
      char *fullpath = malloc(strlen(path) + strlen(ep->d_name) + 2);
      sprintf(fullpath, "%s/%s", path, ep->d_name);
      if (stat(fullpath, &s) == 0 && (s.st_mode & S_IFREG)) {
        count++;
      }
      free(fullpath);
      ep = readdir(dp);
    }

    rewinddir(dp);
    *ls = calloc(count, sizeof(char *));

    count = 0;
    ep = readdir(dp);
    while(NULL != ep){
      struct stat s;
      char *fullpath = malloc(strlen(path) + strlen(ep->d_name) + 2);
      sprintf(fullpath, "%s/%s", path, ep->d_name);
      if (stat(fullpath, &s) == 0 && (s.st_mode & S_IFREG)) {
        (*ls)[count++] = strdup(ep->d_name);
      }
      free(fullpath);
      ep = readdir(dp);
    }

    closedir(dp);
    return count;
}



int cstring_cmp(const void *a, const void *b)
{
  const char **ia = (const char **)a;
  const char **ib = (const char **)b;

  int _ia = atoi(*ia);
  int _ib = atoi(*ib);

  return (_ia > _ib) ? 1 : 0;
}

void update_filelist() {
  // Clean Crappy Dot Files
  run_system_cmd(m_clean_dotfiles);

  int i;
  file_count = file_list("/home/pi/shared", &files);
  qsort(files, file_count, sizeof(char *), cstring_cmp);
}






// ------------------------------
// INotify /tmp folder changes
// -------------------------------
void* tmp_inotify(void *arg)
{
  FILE *fp;
  char tmp_inotify_ret[1024];

  // Open the command for reading.
  fp = popen("/usr/bin/inotifywait -m -e create,delete,move --exclude '/\\.' /home/pi/shared", "r");
  if (fp == NULL) {
    // puts("Failed to run command");
    return NULL;
  }

  // Read the output a line at a time - output it.
  while (fgets(tmp_inotify_ret, sizeof(tmp_inotify_ret)-1, fp) != NULL) {
    printf("INotify--:%s:--\n", tmp_inotify_ret);
	  char delim[] = " ";
    char *ptr = strtok(tmp_inotify_ret, delim);

    // Filename is last space separated value
    char *filename = ptr;
    // debug_print(" %s\n", ptr);
    while ((ptr = strtok(NULL," ")) != NULL) {
      // debug_print(" %s\n", ptr);
      filename = ptr;
    }

    // Not Dotfiles.. macbooks are bad about these
    if (filename[0] != '.') {
      // debug_print("Update Set For %s\n", filename);
      update_filelist();
    }
//     if (strcmp(tmp_inotify_ret, "/home/pi/shared/ CREATE mpv.socket\n") == 0) {
//      printf("INotify Found.\n");
//    }
  }

  // close
  int exitCode = WEXITSTATUS(pclose(fp));
  if (exitCode) {
    return NULL;
  } else {
    return NULL;
  }
}

void start_tmp_inotify() {
  int watcherr;
  if (pid_tmp_inotify > 0) {
    if (SHOW_DEBUG == 1) { printf("Canceling INotify Thread\n"); }
    pthread_cancel(pid_tmp_inotify);
  }
  watcherr = pthread_create(&pid_tmp_inotify, NULL, &tmp_inotify, NULL);
  if (SHOW_DEBUG == 1 && watcherr != 0)
      printf("\ncan't create mpv inotify thread :[%s]\n", strerror(watcherr));
  else if (SHOW_DEBUG == 1)
      printf("\n MPV INotify Thread created successfully\n");
}




// -----------------------
// Interrupts
// -----------------------
void lib_buttonsRotaryInterrupt(void) {
  r_a = digitalRead(ROTARY_PIN_A);
  r_b = digitalRead(ROTARY_PIN_B);

  r_seq_a <<= 1;
  r_seq_a |= r_a;

  r_seq_b <<= 1;
  r_seq_b |= r_b;

  // Mask the MSB four bits
  r_seq_a &= 0b00001111;
  r_seq_b &= 0b00001111;

  if (r_seq_a == 0b00000011 && r_seq_b == 0b00001001) {
    if (SHOW_DEBUG == 1) { printf("CCW\n"); }
    files_r--;
    c_rotary = millis() + DEBOUNCE_DELAY;
  }

  // Compare the recorded sequence with the expected sequence
  if (r_seq_a == 0b00001001 && r_seq_b == 0b00000011) {
    if (SHOW_DEBUG == 1) { printf("CW\n"); }
    files_r++;
    c_rotary = millis() + DEBOUNCE_DELAY;
  }

}

// Rotary Button Pressed
// Actions in main() loop
void lib_buttonsRotaryBtnInterrupt(void) {
  if (i_pause == 0) {
    i_pause = 1;
  } else { i_pause = 0; }
}

// Left Button Pressed
// Actions in main() loop
void lib_buttonsLeftBtnInterrupt(void) {
  r_l = digitalRead(LEFT_PIN_BTN);
  int mi = millis();
  if (!r_l) {
    r_l_hold = mi;
  } else {
    prev_image();
    r_l_hold = 0;
  }
}

// Right Button Pressed
// Actions in main() loop
void lib_buttonsRightBtnInterrupt(void) {
  r_r = digitalRead(RIGHT_PIN_BTN);

  int mi = millis();
  if (!r_r) {
    r_r_hold = mi;
  } else {
    next_image();
    r_r_hold = 0;
  }
}










int main( int argc, char* args[] )
{
  // ------------------------------------------------
  // Initialize
  // ------------------------------------------------
  m_bQuit = 0;

  // Register Signals
  signal(SIGINT, signal_sigint);
  signal(SIGTERM, signal_sigint);

  if (wiringPiSetup () == -1) {
    //if (SHOW_DEBUG == 1) { printf("Failed\n"); }
    signal_sigint(1);
  }

  if ( wiringPiISR (ROTARY_PIN_A, INT_EDGE_BOTH, &lib_buttonsRotaryInterrupt) < 0 ) {
    fprintf (stderr, "Unable to setup ISR: %s\n", strerror(errno));
    signal_sigint(1);
  }
  if ( wiringPiISR (ROTARY_PIN_B, INT_EDGE_BOTH, &lib_buttonsRotaryInterrupt) < 0 ) {
    fprintf (stderr, "Unable to setup ISR: %s\n", strerror(errno));
    signal_sigint(1);
  }
  if ( wiringPiISR (ROTARY_PIN_BTN, INT_EDGE_FALLING, &lib_buttonsRotaryBtnInterrupt) < 0 ) {
    fprintf (stderr, "Unable to setup ISR: %s\n", strerror(errno));
    signal_sigint(1);
  }
  if ( wiringPiISR (RIGHT_PIN_BTN, INT_EDGE_BOTH, &lib_buttonsRightBtnInterrupt) < 0 ) {
    fprintf (stderr, "Unable to setup ISR: %s\n", strerror(errno));
    signal_sigint(1);
  }
   if ( wiringPiISR (LEFT_PIN_BTN, INT_EDGE_BOTH, &lib_buttonsLeftBtnInterrupt) < 0 ) {
    fprintf (stderr, "Unable to setup ISR: %s\n", strerror(errno));
    signal_sigint(1);
  }


  // ------------------------------------------------
  // Start up display on main page
  // ------------------------------------------------

  // file change notifier for tracking mpv socket file
  start_tmp_inotify();
  update_filelist();
  post_image();


  // ------------------------------------------------
  // Main event loop
  // ------------------------------------------------
  int mi = millis();
  while (!m_bQuit) {
    mi = millis();

    if (i_pause == 0 && c_rotary == 0 && ss_delay > 0 && ss_delay < mi) {
      ss_delay = 0;
      next_image();
    }

    if (c_rotary != 0 && c_rotary < mi) {
      int file_mod = 0;
      c_rotary = 0;
      if (files_r < 0) {
        file_mod = files_r % (file_count * -1);
      } else if (files_r > 0) {
        file_mod = files_r % file_count;
      }
      files_r = 0;
      files_i = (files_i + file_mod) % file_count;
      post_image();
    }

    if (r_r_hold > 0 && r_l_hold > 0 && (r_r_hold + 3000) < mi && (r_l_hold + 3000) < mi) {
      // printf("%s\n", "Quitting");
      m_bQuit = 1;
    }

    usleep(100);
  } // bQuit

  // ------------------------------------------------
  // Close down display
  // ------------------------------------------------

  // run_system_cmd("sudo su -c 'kill $(pgrep fbi)'");
  fbi_close_image("/opt/black.jpg");
  if (pid_tmp_inotify > 0) {
    pthread_cancel(pid_tmp_inotify);
  }

  printf("\nControls are yours.\n");
  return m_bSigInt;
}

