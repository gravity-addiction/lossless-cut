## List Actions
```c
int pg_default_addList(struct pg_default_listStruct *ptr) {
  if (pg_default_listConfig->len >= pg_default_listConfig->max) {
    pg_default_listConfig->max = pg_default_listConfig->len + 32;
    struct pg_default_listStruct **newPtrs = (struct pg_default_listStruct**)realloc(pg_default_list, pg_default_listConfig->max * sizeof(struct pg_default_listStruct*));
    pg_default_list = newPtrs;
  }
  pg_default_list[pg_default_listConfig->len] = ptr;
  pg_default_listConfig->len += 1;
  return (pg_default_listConfig->len - 1);
}

void pg_default_setList(struct pg_default_listStruct **ptrs, int len) {
  pg_default_listConfig->len = len;
  pg_default_list = ptrs;
}

void pg_default_resetList() {
  VLIST_CLEAR_CONFIG(pg_default_listConfig);
}
```


## callback for each gui list button
replace 0 in `vlist_clickBtn(pg_default_listConfig, 0);` with the list index, never larger than config->per
repeat elA, elB, elC for each button list element
```
bool pg_default_cbBtn_elA(void* pvGui, void *pvElemRef, gslc_teTouch eTouch, int16_t nX, int16_t nY) {
  if (eTouch != GSLC_TOUCH_UP_IN) { return true; }
  if (pg_wifi_wpaScanning == 1) { return true; }
  gslc_tsGui* pGui = (gslc_tsGui*)(pvGui);
  
  vlist_clickBtn(pg_default_listConfig, 0);
  // Update GUI list Box
  gslc_ElemSetRedraw(pGui, pg_defaultEl[E_DEFAULT_EL_BOX], GSLC_REDRAW_FULL);
  return true;
}
```

## callback for XSlider
```c
bool pg_default_cbBtn_sliderPos(void* pvGui, void* pvElemRef, int16_t nPos)
{
  gslc_tsGui*     pGui      = (gslc_tsGui*)(pvGui);
  gslc_tsElemRef* pElemRef  = (gslc_tsElemRef*)(pvElemRef);
  gslc_tsElem*    pElem     = gslc_GetElemFromRef(pGui, pElemRef);
  gslc_tsXSlider* pSlider   = (gslc_tsXSlider*)(pElem->pXData);

  // Fetch the new RGB component from the slider
  if (pSlider->eTouch == GSLC_TOUCH_DOWN_IN ||
      pSlider->eTouch == GSLC_TOUCH_MOVE_IN ||
      pSlider->eTouch == GSLC_TOUCH_MOVE_OUT
  ) {
    // Set slider config
    vlist_sliderSetPos(pGui, pg_default_listConfig, gslc_ElemXSliderGetPos(pGui, pElemRef));
    // Update Visual List
    gslc_ElemSetRedraw(pGui, pg_defaultEl[E_DEFAULT_EL_BOX], GSLC_REDRAW_FULL);
  }
  return true;
}
```

## callback for slider up arrow
```c
bool pg_default_cbBtn_sliderUp(void* pvGui, void *pvElemRef, gslc_teTouch eTouch, int16_t nX, int16_t nY) {
  if (eTouch != GSLC_TOUCH_UP_IN) { return true; }
  if (pg_wifi_wpaScanning == 1) { return true; }
  gslc_tsGui* pGui = (gslc_tsGui*)(pvGui);

  vlist_sliderChangeCurPos(pGui, pg_default_listConfig, -1);
  gslc_ElemSetRedraw(pGui, pg_defaultEl[E_DEFAULT_EL_BOX], GSLC_REDRAW_FULL);

  return true;
}
```

#callback for slider down arrow
```c
bool pg_default_cbBtn_sliderDown(void* pvGui, void *pvElemRef, gslc_teTouch eTouch, int16_t nX, int16_t nY) {
  if (eTouch != GSLC_TOUCH_UP_IN) { return true; }
  if (pg_wifi_wpaScanning == 1) { return true; }
  gslc_tsGui* pGui = (gslc_tsGui*)(pvGui);

  vlist_sliderChangeCurPos(pGui, pg_default_listConfig, 1);
  gslc_ElemSetRedraw(pGui, pg_defaultEl[E_DEFAULT_EL_BOX], GSLC_REDRAW_FULL);

  return true;
}
```

## callback for GUISlice Box
Modify the **list pointers with char* to be displayed in the list
```c
bool pg_default_cbDrawBox(void* pvGui, void* pvElemRef, gslc_teRedrawType eRedraw)
{
  gslc_tsGui*     pGui      = (gslc_tsGui*)(pvGui);
  gslc_tsElemRef* pElemRef  = (gslc_tsElemRef*)(pvElemRef);
  gslc_tsElem*    pElem     = gslc_GetElemFromRef(pGui, pElemRef);
  gslc_tsRect     pRect     = pElem->rElem;

  // Start Drawing
  gslc_DrawFillRect(pGui,pRect,pElem->colElemFill);

  if (pg_wifi_wpaScanning == 1) {
    vlist_sliderMessage(pGui, pg_default_listConfig, (char*)"... Scanning Wifi Networks ...");
  } else {
    // Generate list of items based on default list info
    char **list = (char**)malloc(pg_default_listConfig->len * sizeof(char*));
    for (int l = 0; l < pg_default_listConfig->len; ++l) {
      list[l] = pg_default_list[l]->txt;
    }
    vlist_sliderDraw(pGui, pg_default_listConfig, list);
    free(list);
  }

  // Stop Drawing
  gslc_ElemSetRedraw(pGui, pElemRef, GSLC_REDRAW_NONE);
  return true;
}
```







## GUI Init Items
```c
// Init Gui
int pg_default_guiInit(gslc_tsGui *pGui)
{
  gslc_tsRect rListBox = {0,5,425,250};

  // Main View Box
  pg_defaultEl[E_DEFAULT_EL_BOX] = gslc_ElemCreateBox(pGui, GSLC_ID_AUTO, ePage, rListBox);
  gslc_ElemSetCol(pGui, pg_defaultEl[E_DEFAULT_EL_BOX], GSLC_COL_GRAY, GSLC_COL_BLACK, GSLC_COL_BLACK);
  // Set the callback function to handle all drawing for the element
  gslc_ElemSetDrawFunc(pGui, pg_defaultEl[E_DEFAULT_EL_BOX], &pg_default_cbDrawBox);


  int xHei = 50;
  // First List item
  pg_default_listConfig->refs[0] = gslc_ElemCreateBtnTxt(pGui, GSLC_ID_AUTO, ePage,
          (gslc_tsRect) {rListBox.x, (rListBox.y + (0 * xHei)), rListBox.w, xHei},
          (char*)" ", 0, E_FONT_MONO18, &pg_default_cbBtn_elA);
  gslc_ElemSetTxtCol(pGui, pg_default_listConfig->refs[0], GSLC_COL_WHITE);
  gslc_ElemSetTxtAlign(pGui, pg_default_listConfig->refs[0], GSLC_ALIGN_MID_LEFT);
  gslc_ElemSetTxtMarginXY(pGui, pg_default_listConfig->refs[0], 10, 0);
  gslc_ElemSetFillEn(pGui, pg_default_listConfig->refs[0], false);
  gslc_ElemSetFrameEn(pGui, pg_default_listConfig->refs[0], true);

  // Second List Item
  pg_default_listConfig->refs[1] = gslc_ElemCreateBtnTxt(pGui, GSLC_ID_AUTO, ePage,
          (gslc_tsRect) {rListBox.x, (rListBox.y + (1 * xHei)), rListBox.w, xHei},
          (char*)" ", 0, E_FONT_MONO18, &pg_default_cbBtn_elB);
  gslc_ElemSetTxtCol(pGui, pg_default_listConfig->refs[1], GSLC_COL_WHITE);
  gslc_ElemSetTxtAlign(pGui, pg_default_listConfig->refs[1], GSLC_ALIGN_MID_LEFT);
  gslc_ElemSetTxtMarginXY(pGui, pg_default_listConfig->refs[1], 10, 0);
  gslc_ElemSetFillEn(pGui, pg_default_listConfig->refs[1], false);
  gslc_ElemSetFrameEn(pGui, pg_default_listConfig->refs[1], true);


  //////////////////////////////////////////
  // Create vertical scrollbar
  pg_default_listConfig->sliderEl = gslc_ElemXSliderCreate(pGui, GSLC_ID_AUTO,
      ePage, &pg_default_listConfig->slider, (gslc_tsRect){(rListBox.x + rListBox.w) + 5, rListBox.y + 35, rFullscreen.w - (rListBox.x + rListBox.w) - 5, rListBox.h - 70},
      0, pg_default_listConfig->scrollMax, 0, 10, true);

  gslc_ElemSetCol(pGui, pg_default_listConfig->sliderEl, GSLC_COL_BLUE_LT1, GSLC_COL_BLACK, GSLC_COL_BLACK);
  gslc_ElemXSliderSetStyle(pGui, pg_default_listConfig->sliderEl, true, GSLC_COL_BLUE_DK1, 0, 0, GSLC_COL_BLACK);
  gslc_ElemXSliderSetPosFunc(pGui, pg_default_listConfig->sliderEl, &pg_wifi_list_cbBtn_sliderPos);
  
  
  //////////////////////////////////////////
  // Create vertical scrollbar Up Arrow
  pg_default_listConfig->sliderUpEl = gslc_ElemCreateBtnTxt(pGui, GSLC_ID_AUTO,
      ePage, (gslc_tsRect){(rListBox.x + rListBox.w) + 5, rListBox.y, rFullscreen.w - (rListBox.x + rListBox.w) - 5, 30}, (char*)"^",
      0, E_FONT_MONO18, &pg_wifi_list_cbBtn_sliderUp);
  gslc_ElemSetTxtCol(pGui, pg_default_listConfig->sliderUpEl, GSLC_COL_GREEN);
  gslc_ElemSetCol(pGui, pg_default_listConfig->sliderUpEl, GSLC_COL_GREEN, GSLC_COL_BLACK, GSLC_COL_BLACK);
  gslc_ElemSetFrameEn(pGui, pg_default_listConfig->sliderUpEl, true);
  gslc_ElemSetTxtAlign(pGui, pg_default_listConfig->sliderUpEl, GSLC_ALIGN_MID_MID);
  

  //////////////////////////////////////////
  // Create vertical scrollbar Down Arrow
  pg_default_listConfig->sliderDownEl = gslc_ElemCreateBtnTxt(pGui, GSLC_ID_AUTO,
      ePage, (gslc_tsRect){(rListBox.x + rListBox.w) + 5, (rListBox.y + rListBox.h) - 30, rFullscreen.w - (rListBox.x + rListBox.w) - 5, 30}, (char*)"v",
      0, E_FONT_MONO18, &pg_wifi_list_cbBtn_sliderDown);
  gslc_ElemSetTxtCol(pGui, pg_default_listConfig->sliderDownEl, GSLC_COL_GREEN);
  gslc_ElemSetCol(pGui, pg_default_listConfig->sliderDownEl, GSLC_COL_GREEN, GSLC_COL_BLACK, GSLC_COL_BLACK);
  gslc_ElemSetFrameEn(pGui, pg_default_listConfig->sliderDownEl, true);
  gslc_ElemSetTxtAlign(pGui, pg_default_listConfig->sliderDownEl, GSLC_ALIGN_MID_MID);
  pg_default_listConfig->sliderDownEl = pg_default_listConfig->sliderDownEl;

  return 1;
}
```



## Page Init Items
```c
// GUI Init
void pg_default_init(gslc_tsGui *pGui) {
  // Initialize Network list
  pg_default_listConfig = VLIST_INIT_CONFIG();
}
```

## Page Destroy Items
```c
// GUI Destroy
void pg_default_destroy() {
  free(pg_default_list);
  free(pg_default_listConfig->refs);
  free(pg_default_listConfig);
}
```
